{
  "compilerOptions": {
    "baseUrl": "./src",
    "paths": {
      "@/*": ["*"]
    },
    
    // 이 옵션은 TypeScript가 빌드 정보를 저장할 파일의 경로를 지정합니다. 이 파일은 TypeScript의 증분 빌드를 지원하며, 이전 빌드의 정보를 저장하여 불필요한 재컴파일을 방지합니다. 위의 경우, ./node_modules/.tmp/tsconfig.app.tsbuildinfo에 저장됩니다.
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    // 이 옵션은 TypeScript가 생성하는 JavaScript 코드의 ECMAScript 버전을 지정합니다. ES2020으로 설정하면 TypeScript는 ES2020 기능을 사용할 수 있는 JavaScript로 코드를 컴파일합니다. 이 설정은 호환성 및 최신 기능 사용에 영향을 줍니다.
    "target": "ES2020",
    // 이 옵션은 클래스 필드를 정의할 때 define를 사용할지를 지정합니다. TypeScript의 클래스 필드 선언에서 ECMAScript 사양과 일관되게 작동하도록 설정하는 옵션입니다. 이를 사용하면 클래스 필드가 초기화될 때의 동작이 명확해지고, ECMAScript 표준과의 일관성을 유지할 수 있습니다.
    // "useDefineForClassFields": true,
    // 이 옵션은 TypeScript가 사용해야 할 라이브러리의 목록을 지정합니다. 여기서 ["ES2020", "DOM", "DOM.Iterable"]으로 설정되어 있으므로, ES2020 기능 및 DOM 관련 기능을 사용할 수 있습니다. DOM.Iterable은 DOM 컬렉션에 대한 이터레이션을 지원합니다.
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    // * DOM.Iterable은 TypeScript의 라이브러리 옵션 중 하나로, DOM 컬렉션(예: NodeList, HTMLCollection)을 이터레이션(iteration)할 수 있도록 지원하는 기능입니다. 이 옵션을 활성화하면 TypeScript가 DOM 컬렉션을 이터러블(iterable)로 간주하게 되어, for...of 루프 또는 전개 연산자(spread operator)와 같은 ES6+의 이터레이션 기능을 사용할 수 있습니다.
    // 이 옵션은 TypeScript가 생성할 모듈 시스템을 지정합니다. ESNext로 설정하면 최신 ECMAScript 모듈 시스템을 사용하여 코드를 컴파일합니다. 이 설정은 ES 모듈과 CommonJS 모듈의 호환성에 영향을 미칩니다.
    "module": "ESNext",
    // 이 옵션은 라이브러리의 타입 검사를 건너뛰도록 설정합니다. 이는 컴파일 속도를 향상시킬 수 있지만, 타입 오류를 놓칠 수도 있습니다. 라이브러리 타입 정의에 대한 검사를 원하지 않으면 이 옵션을 사용하여 빌드 시간을 줄일 수 있습니다.
    // "skipLibCheck": true,

    /* Bundler mode ____________________________*/
    // 이 설정은 TypeScript가 모듈을 해석하는 방식을 지정합니다. "bundler"로 설정되면, Vite와 같은 번들러의 모듈 해석 방식을 따르게 됩니다. 이 설정은 빌드 시 모듈을 올바르게 해석하는 데 중요합니다.
    "moduleResolution": "bundler",
    // 이 옵션은 TypeScript가 .ts 확장자를 가진 파일을 모듈로 임포트할 수 있도록 허용합니다. 이는 Vite와 같은 환경에서 TypeScript 파일을 직접적으로 임포트할 때 유용합니다.
    "allowImportingTsExtensions": true,
    // 이 설정은 각 TypeScript 파일을 개별적으로 모듈로 처리하여, Vite와 같은 번들러와의 호환성을 높입니다. 모든 파일이 독립적으로 컴파일될 수 있도록 보장합니다.
    "isolatedModules": true,
    // 이 옵션은 TypeScript가 모듈 감지를 강제로 수행하도록 설정합니다. Vite와의 호환성을 높이기 위해 모듈 감지가 항상 활성화됩니다.
    "moduleDetection": "force",
    // 이 설정은 TypeScript가 JavaScript 출력 파일을 생성하지 않도록 지정합니다. Vite가 자체적으로 빌드와 번들링을 처리하므로, TypeScript가 출력을 하지 않도록 설정하는 것이 좋습니다.
    "noEmit": true,
    // React의 JSX 변환 방식을 지정합니다. Vite와 React를 함께 사용할 때, 이 설정은 JSX가 올바르게 컴파일되도록 보장합니다.
    "jsx": "react-jsx",

    /* TypeScript ____________________________*/
    // 이 옵션은 TypeScript의 모든 엄격한 검사 기능을 활성화합니다. 즉, 타입 검사, 널 체크, 사용되지 않는 변수, 매개변수 등을 포함하여 코드의 안전성을 높이는 여러 검사 기능이 활성화됩니다. 이 옵션을 사용하면 코드에서 잠재적인 버그를 조기에 발견할 수 있습니다.
    "strict": true,
    // 사용되지 않는 지역 변수가 코드에 존재할 경우 경고를 발생시킵니다. 이 설정은 코드의 가독성을 높이고 불필요한 변수를 제거하는 데 도움을 줍니다.
    "noUnusedLocals": true,
    // 사용되지 않는 함수 매개변수가 있을 경우 경고를 발생시킵니다. 이 설정은 불필요한 매개변수를 제거하여 코드의 명확성을 높이는 데 도움을 줍니다
    "noUnusedParameters": true,
    // switch 문에서 case 블록이 fall-through(하나의 case가 끝난 후 다음 case로 넘어가는 현상)되는 경우 경고를 발생시킵니다. 이를 통해 개발자는 의도치 않은 동작을 피할 수 있습니다.
    "noFallthroughCasesInSwitch": true,
    // 사이드 효과를 가지는 모듈을 임포트할 때 경고를 발생시킵니다. 이 옵션은 모듈이 사이드 효과를 가지고 있음을 명확히 하고, 이를 통해 코드의 예상치 못한 동작을 방지합니다.
    "noUncheckedSideEffectImports": true
  },
  // 특정 경로나 패턴을 기준으로 파일들을 포함하여 컴파일한다(디렉토리 단위로 컴파일할 파일을 지정할때 사용)
  "include": ["src", "vite-env.d.ts"]
}
